// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: butterfish.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ButterfishClient is the client API for Butterfish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ButterfishClient interface {
	StreamsForWrapping(ctx context.Context, opts ...grpc.CallOption) (Butterfish_StreamsForWrappingClient, error)
}

type butterfishClient struct {
	cc grpc.ClientConnInterface
}

func NewButterfishClient(cc grpc.ClientConnInterface) ButterfishClient {
	return &butterfishClient{cc}
}

func (c *butterfishClient) StreamsForWrapping(ctx context.Context, opts ...grpc.CallOption) (Butterfish_StreamsForWrappingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Butterfish_ServiceDesc.Streams[0], "/Butterfish/StreamsForWrapping", opts...)
	if err != nil {
		return nil, err
	}
	x := &butterfishStreamsForWrappingClient{stream}
	return x, nil
}

type Butterfish_StreamsForWrappingClient interface {
	Send(*ClientPush) error
	Recv() (*ServerPush, error)
	grpc.ClientStream
}

type butterfishStreamsForWrappingClient struct {
	grpc.ClientStream
}

func (x *butterfishStreamsForWrappingClient) Send(m *ClientPush) error {
	return x.ClientStream.SendMsg(m)
}

func (x *butterfishStreamsForWrappingClient) Recv() (*ServerPush, error) {
	m := new(ServerPush)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ButterfishServer is the server API for Butterfish service.
// All implementations must embed UnimplementedButterfishServer
// for forward compatibility
type ButterfishServer interface {
	StreamsForWrapping(Butterfish_StreamsForWrappingServer) error
	mustEmbedUnimplementedButterfishServer()
}

// UnimplementedButterfishServer must be embedded to have forward compatible implementations.
type UnimplementedButterfishServer struct {
}

func (UnimplementedButterfishServer) StreamsForWrapping(Butterfish_StreamsForWrappingServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamsForWrapping not implemented")
}
func (UnimplementedButterfishServer) mustEmbedUnimplementedButterfishServer() {}

// UnsafeButterfishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ButterfishServer will
// result in compilation errors.
type UnsafeButterfishServer interface {
	mustEmbedUnimplementedButterfishServer()
}

func RegisterButterfishServer(s grpc.ServiceRegistrar, srv ButterfishServer) {
	s.RegisterService(&Butterfish_ServiceDesc, srv)
}

func _Butterfish_StreamsForWrapping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ButterfishServer).StreamsForWrapping(&butterfishStreamsForWrappingServer{stream})
}

type Butterfish_StreamsForWrappingServer interface {
	Send(*ServerPush) error
	Recv() (*ClientPush, error)
	grpc.ServerStream
}

type butterfishStreamsForWrappingServer struct {
	grpc.ServerStream
}

func (x *butterfishStreamsForWrappingServer) Send(m *ServerPush) error {
	return x.ServerStream.SendMsg(m)
}

func (x *butterfishStreamsForWrappingServer) Recv() (*ClientPush, error) {
	m := new(ClientPush)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Butterfish_ServiceDesc is the grpc.ServiceDesc for Butterfish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Butterfish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Butterfish",
	HandlerType: (*ButterfishServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamsForWrapping",
			Handler:       _Butterfish_StreamsForWrapping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "butterfish.proto",
}
