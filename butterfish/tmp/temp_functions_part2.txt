
func (this *PluginClient) Mux(ctx context.Context) error {
	for {
		msg, err := this.streamClient.Recv()
		if err == io.EOF {
			log.Printf("Plugin stream closed")
			return err
		} else if err != nil {
			log.Printf("Error reading from plugin stream: %s", err)
			return err
		}

		log.Printf("Plugin message: %s", msg.Command)

		this.CommandChan <- msg.Command
		this.HandleCommandExecution(ctx, msg.Id)
	}
}

func (this *ButterfishCtx) PluginFrontend(pluginClient *PluginClient) {
	output := os.Stdout
	log.Printf("Starting plugin frontend")

	for {
		select {
		case <-this.Ctx.Done():
			log.Printf("Plugin frontend context done")
			return

		case cmd := <-pluginClient.CommandChan:
			log.Printf("Plugin command: %s", cmd)
			fmt.Fprintf(output, "> %s\n", cmd)

			result, err := executeCommand(this.Ctx, cmd, output)
			if err != nil {
				log.Printf("Error executing command: %s", err)
				continue
			}
			log.Printf("Command finished with exit code %d", result.Status)

			pluginClient.CommandExecutionChan <- &commandExecution{
				Done:   false,
				Output: result.LastOutput,
			}

			pluginClient.CommandExecutionChan <- &commandExecution{
				Done:     true,
				ExitCode: result.Status,
			}
		}
	}
}
